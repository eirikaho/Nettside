@{
    ViewData["Title"] = "Tree";
}
@*<h2>@ViewData["Title"].</h2>
<h3>@ViewData["Message"]</h3>*@

@*<p>Use this area to provide additional information.</p>*@
<style type="text/css">
    body {
        background-color: black;
        margin: 0px;
        overflow: hidden;
    }
</style>
<script>
    var canvas = document.createElement('canvas');
    document.body.appendChild(canvas);
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    var ctx = canvas.getContext('2d');
    var generation = 0;
    var tree = new Branch(random(50,90));
    var tree2 = new Branch(random(50,90));
    var tree3 = new Branch(random(50,90));
    draw();
    draw2();
    draw3();

    function draw() {
        ctx.save();
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.translate(canvas.width / 2, canvas.height - 100);
        tree.render();
        ctx.restore();
        window.requestAnimationFrame(draw);
    }

    function draw2() {
        ctx.save();
        ctx.translate(canvas.width / 2 + (canvas.width / 4), canvas.height - 100);
        tree2.render();
        ctx.restore();
        window.requestAnimationFrame(draw2);
    }

    function draw3() {
        ctx.save();
        ctx.translate(canvas.width / 2 - (canvas.width / 4), canvas.height - 100);
        tree3.render();
        ctx.restore();
        window.requestAnimationFrame(draw3);
    }

    function Branch(size, rotation) {
        generation++;
        var sway = 0;
        var swaySpeed = random(0.02, 0.1);
        var growth = 0;
        var delay = generation * 10;

        this.children = [];
        if (size > 10) {
            this.children.push(new Branch(size * random(0.7, 0.9), random(0, 30)));
            this.children.push(new Branch(size * random(0.7, 0.9), random(0, -30)));
        }

        this.render = function () {
            ctx.save();
            ctx.rotate((rotation + Math.sin(sway)) * Math.PI / 180);
            ctx.strokeStyle = 'white';
            ctx.beginPath();
            ctx.lineWidth = size * 0.1 * growth;
            ctx.moveTo(0, 0);
            ctx.lineTo(0, -size * growth);
            ctx.stroke();
            ctx.translate(0, -size * growth);

            for (var i = 0; i < this.children.length; i++) {
                this.children[i].render();
            }
            ctx.restore();
            sway += swaySpeed;
            if (delay > 0) {
                delay--;
            } else {
                growth += (1 - growth) * 0.1;
            }
        }
        generation--;

    }
    function random(min, max) {
        return Math.random() * (max - min) + min;

    }
</script>
